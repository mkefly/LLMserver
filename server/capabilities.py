"""Common capabilities protocol for LLM adapters.

Any future LLM framework (e.g., CrewAI, Guidance, etc.) can integrate by
implementing this Protocol. The runtime never needs to change.
"""
from __future__ import annotations
from typing import AsyncIterator, Optional, Dict, Protocol, runtime_checkable

@runtime_checkable
class CapLLM(Protocol):
    """Capability contract that all LLM adapters must implement."""
    async def load(self) -> None: ...
    async def reload_from_uri(self, resolved_uri: str)) -> None: ...

    async def chat(self, text: str, *, session_id: Optional[str], params: Dict) -> str: ...
    async def query(self, text: str, *, session_id: Optional[str], params: Dict) -> str: ...
    async def retrieve(self, text: str, *, session_id: Optional[str], params: Dict) -> str: ...

    async def stream_chat(self, text: str, *, session_id: Optional[str], params: Dict) -> AsyncIterator[str]: ...
    async def stream_query(self, text: str, *, session_id: Optional[str], params: Dict) -> AsyncIterator[str]: ...
